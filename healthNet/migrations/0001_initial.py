# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-12-04 20:30
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Admission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason_for_admission', models.TextField(default='', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_name', models.CharField(default='Appointment', max_length=50)),
                ('start_time', models.TimeField(default=django.utils.timezone.now)),
                ('start_date', models.DateField(default=datetime.datetime(2016, 12, 5, 20, 30, 14, 253279, tzinfo=utc))),
                ('end_time', models.TimeField(default=datetime.datetime(2016, 12, 4, 21, 30, 14, 253279, tzinfo=utc))),
                ('end_date', models.DateField(default=datetime.datetime(2016, 12, 5, 20, 30, 14, 253279, tzinfo=utc))),
            ],
        ),
        migrations.CreateModel(
            name='Assistant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assistant_type', models.CharField(default='----------', max_length=25, validators=[django.core.validators.RegexValidator('\\w')])),
            ],
        ),
        migrations.CreateModel(
            name='ContactInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_address', models.CharField(default='----------', max_length=50, validators=[django.core.validators.RegexValidator('\\w')])),
                ('city_or_town', models.CharField(default='----------', max_length=25, validators=[django.core.validators.RegexValidator('\\w')])),
                ('region', models.CharField(default='----------', max_length=25, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='State/Region')),
                ('country', models.CharField(default='----------', max_length=25, validators=[django.core.validators.RegexValidator('\\w')])),
                ('zipcode', models.CharField(default='----------', max_length=5, validators=[django.core.validators.RegexValidator('\\d')])),
                ('phone_number', models.CharField(default='----------', max_length=25, validators=[django.core.validators.RegexValidator('\\d')])),
                ('emergency_contact_1', models.CharField(default='----------', max_length=25, validators=[django.core.validators.RegexValidator('\\w')])),
                ('emergency_contact_2', models.CharField(default='----------', max_length=25, validators=[django.core.validators.RegexValidator('\\w')])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialization', models.CharField(blank=True, default='None', max_length=25, validators=[django.core.validators.RegexValidator('\\w')])),
                ('is_primary_care_physician', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hospital_name', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator('\\W')], verbose_name='Hospital Name')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalNotes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doctor_id', models.CharField(max_length=10)),
                ('time', models.DateTimeField(default=datetime.datetime(2016, 12, 4, 20, 30, 14, 243253, tzinfo=utc))),
                ('general_comments', models.TextField(blank=True, max_length=500, null=True, verbose_name='General comments:')),
                ('medical_allergies_or_reactions', models.TextField(blank=True, max_length=10000, null=True)),
                ('diseases_conditions', models.CharField(blank=True, default='', max_length=100, verbose_name='Diseases Conditions -------------------------------------------------------------------------------- comments:')),
                ('diabetes', models.BooleanField(default=False)),
                ('kidney_disease', models.BooleanField(default=False)),
                ('stroke', models.BooleanField(default=False)),
                ('tuberculosis', models.BooleanField(default=False)),
                ('arrythmia', models.BooleanField(default=False)),
                ('high_blood_pressure', models.BooleanField(default=False)),
                ('hepatitis', models.BooleanField(default=False)),
                ('depression', models.BooleanField(default=False)),
                ('coronary_artery_disease', models.BooleanField(default=False)),
                ('asthma', models.BooleanField(default=False)),
                ('thyroid_disease', models.BooleanField(default=False)),
                ('emphysema', models.BooleanField(default=False)),
                ('congestive_heart_failure', models.BooleanField(default=False)),
                ('heart_attack', models.BooleanField(default=False)),
                ('seizures', models.BooleanField(default=False)),
                ('sexually_transmitted_disease_type', models.BooleanField(default=False)),
                ('eye_problems', models.BooleanField(default=False)),
                ('cancer', models.BooleanField(default=False)),
                ('surgeries', models.CharField(blank=True, default='', max_length=100, verbose_name='Surgeries -------------------------------------------------------------------------------- comments:')),
                ('previous_surgery_1', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Previous surgery #1')),
                ('type_of_surgery_1', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Type of surgery #1')),
                ('reason_for_hospitalization_1', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Reason for hospitalization #1')),
                ('location_1', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Location of surgery #1')),
                ('date_1', models.DateField(blank=True, null=True, verbose_name='Surgery #1 date')),
                ('previous_surgery_2', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Previous surgery #2')),
                ('type_of_surgery_2', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Type of surgery #2')),
                ('reason_for_hospitalization_2', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Reason for hospitalization #2')),
                ('location_2', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Location of surgery #2')),
                ('date_2', models.DateField(blank=True, null=True, verbose_name='Surgery #2 date')),
                ('previous_surgery_3', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Previous surgery #3')),
                ('type_of_surgery_3', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Type of surgery #3')),
                ('reason_for_hospitalization_3', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Reason for hospitalization #3')),
                ('location_3', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Location of surgery #3')),
                ('date_3', models.DateField(blank=True, null=True, verbose_name='Surgery #3 date')),
                ('other_surgeries', models.CharField(blank=True, max_length=100, null=True, verbose_name='Other surgeries')),
                ('medicines', models.CharField(blank=True, default='', max_length=100, verbose_name='Medicines -------------------------------------------------------------------------------- comments:')),
                ('medicine_name_1', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Medicine #1 name')),
                ('dosage_1', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Medicine #1 dosage')),
                ('medicine_name_2', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Medicine #2 name')),
                ('dosage_2', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Medicine #2 dosage')),
                ('medicine_name_3', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Medicine #3 name')),
                ('dosage_3', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Medicine #3 dosage')),
                ('medicine_name_4', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Medicine #4 name')),
                ('dosage_4', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Medicine #4 dosage')),
                ('medicine_name_5', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Medicine #5 name')),
                ('dosage_5', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Medicine #5 dosage')),
                ('other_medicines', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')])),
                ('care_providers', models.CharField(blank=True, default='', max_length=100, verbose_name='Care Providers -------------------------------------------------------------------------------- comments:')),
                ('pharmacy', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Preferred pharmacy')),
                ('other_care_provider_1', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Other care provider #1')),
                ('reason_for_visit_1', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Reason for visit')),
                ('other_care_provider_2', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Other care provider #2')),
                ('reason_for_visit_2', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Reason for visit')),
                ('other_care_provider_3', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Other care provider #3')),
                ('reason_for_visit_3', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Reason for visit')),
                ('immunizations', models.CharField(blank=True, default='', max_length=100, verbose_name='Immunizations -------------------------------------------------------------------------------- comments:')),
                ('tetanus', models.DateField(blank=True, null=True)),
                ('influenza', models.DateField(blank=True, null=True)),
                ('pneumonia', models.DateField(blank=True, null=True)),
                ('hepatitis_b', models.DateField(blank=True, null=True)),
                ('other_immunization_1', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Other immunization #1 type and date')),
                ('other_immunization_2', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Other immunization #2 type and date')),
                ('other_immunization_3', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Other immunization #3 type and date')),
                ('tests', models.CharField(blank=True, default='', max_length=100, verbose_name='Tests -------------------------------------------------------------------------------- comments:')),
                ('cholesterol_test_result', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Cholesterol test result and date')),
                ('pap_smear_or_pelvic_test_result', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Pap smear or pelvic test result and date')),
                ('mammogram_test_result', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Mammogram test result and date')),
                ('blood_in_stool_test_result', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Blood in stool test result and date')),
                ('hiv_test_result', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='HIV test result and date')),
                ('colonoscopy_test_result', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='colonoscopy test result and date')),
                ('hepatitis_c_test_result', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Hepatitis c test result and date')),
                ('family_history', models.CharField(blank=True, default='', max_length=100, verbose_name='Family History -------------------------------------------------------------------------------- comments:')),
                ('fh_of_alcoholism_or_drug_use', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Alcoholism or drug use')),
                ('fh_of_cancer', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Cancer')),
                ('fh_of_cancer_type', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Cancer type')),
                ('fh_of_diabetes', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Diabetes')),
                ('fh_of_heart_disease', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Heart disease')),
                ('fh_of_high_blood_pressure', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='High blood pressure')),
                ('fh_of_high_cholesterol', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='High cholesterol')),
                ('fh_of_osteoporosis', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Osteoporosis')),
                ('fh_of_mental_illness', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Mental illness')),
                ('fh_of_stroke', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Stroke')),
                ('fh_of_thyroid_disease', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Thyroid disease')),
                ('fh_of_other_illnesses', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Other illnesses')),
                ('health_habits', models.CharField(blank=True, default='', max_length=100, verbose_name='Health Habits -------------------------------------------------------------------------------- comments:')),
                ('tobacco_use', models.BooleanField(default=False, verbose_name='Do you smoke or use any tobacco products?')),
                ('t_quantity', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='No. of cigarettes each day')),
                ('years_smoking', models.CharField(blank=True, max_length=2, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='How long have you smoked?')),
                ('other_tobacco', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Other tobacco products')),
                ('alcohol_use', models.BooleanField(default=False, verbose_name='Do you drink alcohol?')),
                ('a_quantity', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='How much?')),
                ('frequency', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='How often?')),
                ('cut_down', models.BooleanField(default=False, verbose_name='Do you feel the need to cut down?')),
                ('other_drugs_s', models.BooleanField(default=False, verbose_name='Do you use any other drugs?')),
                ('still_using_them', models.BooleanField(default=False, verbose_name='Are you still using them?')),
                ('other_comments', models.TextField(blank=True, max_length=1000, null=True)),
                ('personal_history', models.CharField(blank=True, default='', max_length=100, verbose_name='Personal History -------------------------------------------------------------------------------- comments:')),
                ('feel_sad_or_depressed', models.BooleanField(default=False, verbose_name='Do you often feel sad or depressed?')),
                ('concerns', models.BooleanField(default=False, verbose_name='Do you feel there is something wrong with your body?')),
                ('unmet_need', models.BooleanField(default=False, verbose_name='Do you have limited access to food, shelter or medical care?')),
                ('major_life_changes', models.BooleanField(default=False, verbose_name='Have there been any major changes in your life?')),
                ('spiritual_emotional_support', models.BooleanField(default=False, verbose_name='Do you have some form of spiritual support?')),
                ('marital_status', models.BooleanField(default=False, verbose_name='Are you married?')),
                ('employment', models.BooleanField(default=False, verbose_name='Are you currently employed?')),
                ('work', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='If so, where do you work?')),
                ('unemployment_reason', models.TextField(blank=True, max_length=100, null=True, verbose_name='Reason for unemployment, if unemployed')),
                ('exercise', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator('\\w')], verbose_name='Do you even lift brah?')),
                ('sexual_history', models.CharField(blank=True, default='', max_length=100, verbose_name='Sexual History -------------------------------------------------------------------------------- comments:')),
                ('sexually_active', models.BooleanField(default=False, verbose_name='Are you sexually active?')),
                ('std_risk', models.BooleanField(default=False, verbose_name='Do you feel you are at risk for HIV/AIDS?')),
                ('birth_control', models.BooleanField(default=False, verbose_name='Do you use any form of birth control?')),
                ('children', models.IntegerField(blank=True, null=True, verbose_name='How many children do you have, if any?')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dob', models.DateField(null=True, verbose_name='Date of birth')),
                ('height', models.CharField(default=None, max_length=8, validators=[django.core.validators.RegexValidator('\\w')])),
                ('weight', models.CharField(default=None, max_length=10, validators=[django.core.validators.RegexValidator('\\w')])),
                ('insurance_provider', models.CharField(default=None, max_length=50, validators=[django.core.validators.RegexValidator('\\w')])),
                ('insurance_number', models.CharField(default=None, max_length=10, validators=[django.core.validators.RegexValidator('\\w')])),
                ('is_admitted', models.BooleanField(default=False)),
                ('pending_transfer', models.BooleanField(default=False)),
                ('prescriptions', models.TextField(default='', max_length=50)),
                ('hospital', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Hospital')),
                ('hospital_to_transfer', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transferring_hospital', to='healthNet.Hospital')),
                ('primary_care_physician', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Doctor')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drug_name', models.CharField(default='----------', max_length=75, validators=[django.core.validators.RegexValidator('\\w')])),
                ('dosage', models.CharField(default='per Day', max_length=20, validators=[django.core.validators.RegexValidator('\\w')])),
                ('reason', models.TextField(max_length=200)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthNet.Doctor')),
                ('patient_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Patient')),
            ],
        ),
        migrations.CreateModel(
            name='SystemLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('action', models.CharField(editable=False, max_length=100)),
                ('operator', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TestResults',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=255)),
                ('document', models.FileField(default='static/header.jpg', upload_to='documents/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('is_released', models.BooleanField(default=False)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthNet.Doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthNet.Patient')),
            ],
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Patient')),
                ('receivingHospital', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Hospital')),
            ],
        ),
        migrations.AddField(
            model_name='medicalnotes',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='healthNet.Patient'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='hospital',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Hospital'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assistant',
            name='hospital',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Hospital'),
        ),
        migrations.AddField(
            model_name='assistant',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='appointment',
            name='assistant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Assistant'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='current_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='appointment',
            name='doctor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Doctor'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='hospital',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Hospital'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Patient'),
        ),
        migrations.AddField(
            model_name='admission',
            name='assistant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Assistant'),
        ),
        migrations.AddField(
            model_name='admission',
            name='doctor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Doctor'),
        ),
        migrations.AddField(
            model_name='admission',
            name='patient',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Patient'),
        ),
        migrations.AddField(
            model_name='admin',
            name='hospital',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='healthNet.Hospital'),
        ),
        migrations.AddField(
            model_name='admin',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
